[1mdiff --git a/BinaryGap b/BinaryGap[m
[1mindex e69de29..635e067 100644[m
[1m--- a/BinaryGap[m
[1m+++ b/BinaryGap[m
[36m@@ -0,0 +1,52 @@[m
[32m+[m[32m// you can write to stdout for debugging purposes, e.g.[m
[32m+[m[32m// console.log('this is a debug message');[m
[32m+[m[32mfunction isInt(value) {[m
[32m+[m[32m    return typeof valur === 'number' && !isNaN (value) && parseInt (Number(value)) == value && !isNaN(parseInt(valur, 10));[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunction dec2bin(dec){[m
[32m+[m[32m    return (dec >>> 0).toString(2);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunction getGaps(binArr, gaps){[m
[32m+[m[32m    let firstIndex = binArr.indexOf('1');[m
[32m+[m[41m    [m
[32m+[m[32m    if(firstIndex >-1 {[m
[32m+[m[32m        let secondHalf = binArr.slice(firstIndex +1);[m
[32m+[m[32m        let secondIndex = secondHalf.indexOf('1');[m
[32m+[m[41m        [m
[32m+[m[32m        if (secondIndex >-1){[m
[32m+[m[32m            if (secondIndex !==0){[m
[32m+[m[32m            gaps.push(secondIndex)};[m
[32m+[m[41m            [m
[32m+[m[32m            if (secondHalf.slice(secondIndex).length >0){[m
[32m+[m[32m                return getGaps(secondHalf.slice(secondIndex), gaps);[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m    return gaps;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m
[32m+[m[32mfunction solution(N) {[m
[32m+[m[32m    // write your code in JavaScript (Node.js 8.9.4)[m
[32m+[m[32m    if(isInt(N)) {[m
[32m+[m[32m        const min = 1;[m
[32m+[m[32m        const max = 2147483647;[m
[32m+[m[41m        [m
[32m+[m[32m        if (N >= min && N <== max){[m
[32m+[m[32m            const bin = dec2bin (N);[m
[32m+[m[41m            [m
[32m+[m[32m            const bincArry = bin.split('');[m
[32m+[m[41m            [m
[32m+[m[32m            const gaps =getGaps(binArr, []);[m
[32m+[m[41m            [m
[32m+[m[32m            return (gaps.length > 0) ? Math.max.apply(Math, gaps) : 0;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[41m    [m
[32m+[m[32m    return 0;[m
[32m+[m[32m}[m
\ No newline at end of file[m
